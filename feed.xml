<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://localhost:8080</link>
    <atom:link href="http://localhost:8080/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Tue, 21 Jan 2020 10:40:17 +0100</pubDate>
    <lastBuildDate>Tue, 21 Jan 2020 10:40:17 +0100</lastBuildDate>

    <item>
      <title>JBake Blog with Maven Plugin</title>
      <link>http://localhost:8080/blog/2020/jbake-blog-with-maven.html</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog/2020/jbake-blog-with-maven.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;dlist&quot;&gt; 
   &lt;dl&gt; 
    &lt;dt class=&quot;hdlist1&quot;&gt;
     Summary
    &lt;/dt&gt; 
    &lt;dd&gt; 
     &lt;p&gt;When I decided to start blogging, the combination of Github pages and JBake looked most promising to me: Out-of-the-box support of Asciidoc, Java application should be friendly for me as Java developer, is one of the popular most popular static site generators, etc.&lt;br&gt; &lt;br&gt; You’ll find many articles and blog posts about the combination of JBake and Gradle. But because I’m much more familiar with Maven and Maven tooling was already installed on my Notebook, I decided to try the JBake’s Maven plugin for stetting up the static Blog site.&lt;/p&gt; 
    &lt;/dd&gt; 
   &lt;/dl&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_preparation&quot;&gt;Preparation&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;Create GitHub repository named &amp;lt;Github-User&amp;gt;.github.io for personal GitHub Pages site.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;serve &apos;master&apos; branch&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;Success of configuration can be verified when …​…​.. image of settings page&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;imageblock&quot;&gt; 
  &lt;div class=&quot;content&quot;&gt; 
   &lt;img src=&quot;http://localhost:8080/blog/2020/Github_Pages_Setting_Blog.png&quot; alt=&quot;Github Pages Setting Blog&quot;&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;Java version 8 is required&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;but due to &lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;jenv&lt;/a&gt; it’s easy to switch between installed Java JDKs.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_starting_blog_project&quot;&gt;Starting Blog Project&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;When setting up my Blog, the goal way to utilize JBake by Maven only. So, I don’t wanted to install JBake explicitly and let Maven handle the download and integration of JBake artifacts.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;The most explanations below apply for the JBake Maven Plugin in general, but some are specific for settings I did for my Blog project. Please see the Maven &lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/blob/master/pom.xml&quot;&gt;pom.xml&lt;/a&gt; of my Blog project. If you also want to start your Blog with Maven and the JBake plugin, you could even copy the POM and adapt it slightly - very few definitions are specific to my Blog project, eg. group and artifact id.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_jbake_maven_plugin&quot;&gt;JBake Maven Plugin&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;The JBake Maven Plugin is hosted on &lt;a href=&quot;https://github.com/jbake-org/jbake-maven-plugin&quot;&gt;Github&lt;/a&gt;. There you can find some useful information to start its usage.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;It also helps a lot, that the plugin follows good practices of Maven plugin development and provides a &lt;code&gt;help&lt;/code&gt; goal:&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;listingblock&quot;&gt; 
  &lt;div class=&quot;content&quot;&gt; 
   &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:help   # -Ddetail=true -Dgoal=[seed|generate|watch|inline]&lt;/code&gt;&lt;/pre&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;The &lt;code&gt;jbake:help&lt;/code&gt; goal gives general information about other goals of the plugin, it provides even more information than the Github page of JBake Maven plugin. The &lt;code&gt;jbake:help&lt;/code&gt; called without additional arguments just lists available goals. In addition, it considers the all but considers property System property arguments &lt;code&gt;detail&lt;/code&gt; and &lt;code&gt;goal&lt;/code&gt; (commented out above) to give more detailed information about each plugin’s goal.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;sect3&quot;&gt; 
  &lt;h4 id=&quot;_plugin_goals&quot;&gt;Plugin Goals&lt;/h4&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The most available goals consider arguments given as System properties. The most important ones are:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;dlist&quot;&gt; 
   &lt;dl&gt; 
    &lt;dt class=&quot;hdlist1&quot;&gt;
     outputDirectory
    &lt;/dt&gt; 
    &lt;dd&gt; 
     &lt;p&gt;The directory goals write the generated output.&lt;/p&gt; 
    &lt;/dd&gt; 
    &lt;dt class=&quot;hdlist1&quot;&gt;
     inputDirectory
    &lt;/dt&gt; 
    &lt;dd&gt; 
     &lt;p&gt;The directory goals read input from. The input directory defaults for the most goals to &lt;code&gt;${project.basedir}/src/main/jbake)&lt;/code&gt;.&lt;/p&gt; 
    &lt;/dd&gt; 
   &lt;/dl&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The easiest way to setup the Blog project is to fetch samples templates and content and populate the your Blog project folders. This can be achieved with the &lt;code&gt;jbake:seed&lt;/code&gt; goal.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;code&gt;jbake:seed&lt;/code&gt; goal is an exception to the default &lt;code&gt;outputDirectory&lt;/code&gt; argument, because it populates the input folders. If you don’t like to modify the &lt;code&gt;pom.xml&lt;/code&gt; temporarily for the initialization step and work with a copy of my POM, you can overwrite the output directory on the command-line as follows:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:seed -DoutputDirectory=./src/main/jbake&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Before we generate the sample static Blog site, you should have a look at the jbake configuration, which is hosted in &lt;code&gt;${project.basedir}/src/main/jbake/jbake.properties)&lt;/code&gt;:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;#site.host=https://guntherrotsch.github.io
site.host=http://localhost:8080
render.tags=false
render.sitemap=true&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;For local testing the site, I’ve changed the &lt;code&gt;site.host&lt;/code&gt; property temporarily to localhost. JBake uses this parameter to generate the links between the site pages, which is quite important.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;admonitionblock warning&quot;&gt; 
   &lt;table&gt; 
    &lt;tbody&gt;
     &lt;tr&gt; 
      &lt;td class=&quot;icon&quot;&gt; 
       &lt;div class=&quot;title&quot;&gt;
        Warning
       &lt;/div&gt; &lt;/td&gt; 
      &lt;td class=&quot;content&quot;&gt; Don’t forget to change the &lt;code&gt;site.host&lt;/code&gt; to you Github Pages URL before you commit and push the project files to Github. The commented out first line shows the definition for my Blog site’s URL. &lt;/td&gt; 
     &lt;/tr&gt; 
    &lt;/tbody&gt;
   &lt;/table&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;code&gt;jbake:generate&lt;/code&gt; goal applies the project’s templates to the sample content files and generates the static site:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:generate&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;My project POM already defines input and output parameters, which is why no arguments on the command-line need to be given. If you want to have a look at the generated site you can either serve it by a local Web server, e.g. by executing &lt;code&gt;python3 -m http.server&lt;/code&gt; in the site’s root folder, or use the &lt;code&gt;jbake:inline&lt;/code&gt; goal, that starts JBake’s internal Web server:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:inline [ -Dport=8000 ]&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The JBake’s internal Web server listens by default on port &lt;code&gt;8080&lt;/code&gt;. If you have another application occupying &lt;code&gt;8080&lt;/code&gt;, then the listening port of JBake can be changed with the &lt;code&gt;port&lt;/code&gt; parameter.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;code&gt;jbake:inline&lt;/code&gt; watches for changes of templates and content in the source folder and re-generates the static site if any modified files are detected. After refreshing page in the browser you see the changes without explicitly generating the static site again, which is very nice for a workflow. So, it’s worth considering usage of JBake’s internal Web server, even if you are used to another local Web server.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;I’m really happy to have selected JBake as static site generator when I started blogging. The Java tooling feels familiar for me and JBake’s features are absolutely satisfying - I appreciate the Asciidoc support in particular.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;Also, the combination with the Maven plugin works really well. Till today I haven’t installed JBake CLI and let do Maven the job of managing the required JBake dependencies.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
