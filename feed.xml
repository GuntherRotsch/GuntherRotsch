<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://guntherrotsch.github.io</link>
    <atom:link href="https://guntherrotsch.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Sun, 1 Mar 2020 19:20:24 +0100</pubDate>
    <lastBuildDate>Sun, 1 Mar 2020 19:20:24 +0100</lastBuildDate>

    <item>
      <title>JBake, Asciidoc and PlantUML</title>
      <link>https://guntherrotsch.github.io/blog_2020/jbake-asciidoctor-plantuml.html</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/jbake-asciidoctor-plantuml.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;It is really a hype to have everything in version control, namely Git, - and it is always better to version text source than images or binary files. This applies to diagrams, too. With the PlantUML extension Asciidoc offers a way to define diagrams in a declarative way, but include them as images into generated documents, eg. Blog posts like HTML pages.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_configuration&quot;&gt;Configuration&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The use of PlantUML is actually not very difficult to configure. Because my Blog project setup works with JBake’s Maven plugin, we need to add the dependency of &lt;code&gt;jbake-maven-plugin&lt;/code&gt; on the &lt;em&gt;diagram&lt;/em&gt; extension:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-xml hljs&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.asciidoctor&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;asciidoctorj-diagram&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;1.5.18&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The diagram extension includes PlantUML.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The next and last step is to set some properties in JBake’s configuration file &lt;code&gt;jbake.properties&lt;/code&gt;:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;asciidoctor.option.requires=asciidoctor-diagram
asciidoctor.attributes=sourceDir=src/main/jbake,imagesdir=assets/img/diagrams,imagesoutdir=../../assets/assets/img/diagrams,source-highlighter=highlight.js,icons=font&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;If you’re interested in the image directory configuration the &lt;a href=&quot;https://guntherrotsch.github.io/blog_2020/non-jekyll-github-pages.html&quot;&gt;Blog post&lt;/a&gt; gives more details.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_usage&quot;&gt;Usage&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;With described configurations in place, UML diagrams can be easily included in Blog posts. The definition:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;[plantuml, &quot;asciidoctor-sequence-diagram&quot;, &quot;png&quot;]
----
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: another authentication Response
----&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;results in the diagram:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;imageblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;img src=&quot;https://guntherrotsch.github.io/assets/img/diagrams/asciidoctor-sequence-diagram.png&quot; alt=&quot;asciidoctor sequence diagram&quot; width=&quot;298&quot; height=&quot;214&quot;&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Because PlantUML includes the &lt;em&gt;Creole&lt;/em&gt; markup engine, which offers the definition of simple &lt;em&gt;tree like&lt;/em&gt; structures, it’s also possible to create diagrams of directory hierarchies for example. The definition:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;[plantuml, &quot;file-system-tree&quot;, &quot;png&quot;, opts=&quot;inline&quot;]
----
@startuml
skinparam {
  BackgroundColor transparent
  BorderColor transparent
}
legend
Root
|_ Element 1
  |_ Element 1.1
    |_ Element 1.1.1
    |_ Element 1.1.2
  |_ Element 1.2
  |_ Element 1.3
|_ Element 2
  |_ Element 2.1
end legend
----&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;renders to:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;imageblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;img src=&quot;https://guntherrotsch.github.io/assets/img/diagrams/file-system-tree.png&quot; alt=&quot;file system tree&quot; width=&quot;164&quot; height=&quot;196&quot;&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>OpenApi generated JAX/RS Service: Binary Encoding</title>
      <link>https://guntherrotsch.github.io/blog_2020/openapi-jaxrs-encoding-configuration.html</link>
      <pubDate>Mon, 24 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/openapi-jaxrs-encoding-configuration.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Let’s say an API defines a response model object as follows:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-yaml hljs&quot; data-lang=&quot;yaml&quot;&gt;  ....
definitions:
  SomeResponse:
    type: &quot;object&quot;
        required: &quot;data&quot;
    properties:
      ...
      data:
        description: The binary data of the response object.
        type: &quot;string&quot;
        format: &quot;byte&quot;
  ...&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;The code produced by generator &lt;code&gt;jaxrs-spec&lt;/code&gt; encodes the &lt;code&gt;data&lt;/code&gt; field as an array of bytes (numbers). The ASCII string &quot;Java&quot; for example results in an encoded JSON field &lt;code&gt;&quot;data&quot;: [ 112, 141, 166, 141 ]&lt;/code&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;On the other side, the generator &lt;code&gt;java&lt;/code&gt; creates client code that encodes such &lt;em&gt;byte strings&lt;/em&gt; of the API spec as base 64 strings. The sample string &quot;Java&quot; results in &lt;code&gt;&quot;data&quot;: &quot;SmF2YQ==&quot;&lt;/code&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;Eventually, this leads to a situation, the generated client and server are not compatible and cannot exchange binary data.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;The simplest approach to fix this issue is by configuring the binary data strategy on the server-side:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code class=&quot;language-java hljs&quot; data-lang=&quot;java&quot;&gt;import javax.json.bind.*;
import javax.ws.rs.ext.*;

/**
 * The JsonbConfigurator configures the binary data strategy of JSON Binding.
 * Instead of the default strategy &quot;byte array&quot; the &quot;base 64&quot; encoding is
 * activated.
 */
@Provider
public class JsonbConfigurator implements ContextResolver&amp;lt;Jsonb&amp;gt; {

  @Override
  public Jsonb getContext(Class&amp;lt;?&amp;gt; type) {
    JsonbConfig config = getJsonbConfig();
    return JsonbBuilder.newBuilder().withConfig(config).build();
  }

  private JsonbConfig getJsonbConfig() {
    return new JsonbConfig().withBinaryDataStrategy(BinaryDataStrategy.BASE_64);
  }
}&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If you add this class to your JAX/RS server project, client and server both encode and decode binary data as base 64 strings and start to work well together. Such a Jakarta EE based solution should definitely preferred over the customization of generator’s templates, in particular if you take long-term maintainability into account.&lt;/p&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Maven Dependecy Analyzis Plugin</title>
      <link>https://guntherrotsch.github.io/blog_2020/maven-dependency-analysis-plugin.html</link>
      <pubDate>Wed, 12 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/maven-dependency-analysis-plugin.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;When implementing an application I usually use the logging facade &lt;code&gt;slf4j&lt;/code&gt;. When double-checking the dependencies of such a project with&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;$ mvn dependency:analyse&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;the plugin often reports&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;[WARNING] Unused declared dependencies found:
[WARNING]    org.slf4j:slf4j-log4j12:jar:1.7.26:test&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;But without declaring the reported &lt;code&gt;slf4j-log4j&lt;/code&gt; as dependency, the tests suppress the log output entirely. The reason for this is that &lt;code&gt;slf4j&lt;/code&gt; logging facade looks up available implementations of the facade interface by reflection. If no implementation like the &lt;code&gt;slf4j-log4j&lt;/code&gt; is found, the &lt;code&gt;no-op&lt;/code&gt; logger is installed and no logging output is generated.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;But we cannot blame the Maven dependency plugin, because it can only consider dependencies explicitly defined in the POM, and not libraries resolved by reflection.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;admonitionblock note&quot;&gt; 
 &lt;table&gt; 
  &lt;tbody&gt;
   &lt;tr&gt; 
    &lt;td class=&quot;icon&quot;&gt; &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt; &lt;/td&gt; 
    &lt;td class=&quot;content&quot;&gt; The scope of the &lt;code&gt;slf4j-log4j&lt;/code&gt; artifact is just &lt;code&gt;test&lt;/code&gt;, because at runtime the application server provides an appropriate implementation of the logging facade interface. &lt;/td&gt; 
   &lt;/tr&gt; 
  &lt;/tbody&gt;
 &lt;/table&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Non-Jekyll Github Pages</title>
      <link>https://guntherrotsch.github.io/blog_2020/non-jekyll-github-pages.html</link>
      <pubDate>Sat, 1 Feb 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/non-jekyll-github-pages.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;&amp;nbsp;&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Github Pages was originally designed to integrate static site-generator Jekyll. This may still be the most applied combination. But today it’s also possible to generate a static site using a generator of your choice and publish it with Github Pages. Because my Blog is generated with JBake and only distribution files are pushed to &lt;code&gt;master&lt;/code&gt; branch of Github repo, I placed an empty &lt;code&gt;.nojekyll&lt;/code&gt; file into the web root. According to the documentation, this tells Github Pages to skip the Jekyll build and just transfer every file hosted in &lt;code&gt;master&lt;/code&gt; branch to the web server. However, images are still not deployed and the &lt;em&gt;alternative&lt;/em&gt; text is shown instead to the users.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_images&quot;&gt;Images&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The Github Pages documentation mentions, that images should be kept below an &lt;code&gt;assets&lt;/code&gt; folder. This may apply for Jekyll especially, but nevertheless I introduced such a folder and moved the images to &lt;code&gt;/assets/img&lt;/code&gt;. Actually, I ended up with two nested folders named &lt;code&gt;assets&lt;/code&gt; in the sources of the project. JBake removes one of them during &lt;em&gt;baking&lt;/em&gt; of the site, so that the directory structure of the distribution contains only one folder &lt;code&gt;assets&lt;/code&gt; possibly required by Github Pages.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;To clean everything up a bit, the &lt;code&gt;css&lt;/code&gt;, &lt;code&gt;fonts&lt;/code&gt;, and &lt;code&gt;js&lt;/code&gt; folders are also moved below the &lt;code&gt;/assets&lt;/code&gt; directory. This requires adaption of the templates, eg. the &lt;code&gt;header.ftl&lt;/code&gt; has to reference the right stylesheets:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;...
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/asciidoctor.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/base.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
&amp;lt;link href=&quot;&amp;lt;#if (content.rootpath)??&amp;gt;${content.rootpath}&amp;lt;#else&amp;gt;&amp;lt;/#if&amp;gt;assets/css/prettify.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
...&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;After publishing these changes, the the images embedded in the pages appear as expected.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_pages_in_sub_directories&quot;&gt;Pages in Sub-directories&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The typical directory structure of a JBake project organizes HTML pages as follows:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;/
   ...
   index.html
   ...
   /blog/2020
      first-post.html
      second-post.html
      ...&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The index page is initially presented to the user when he navigates to the web page’s root. From here users may navigate to the individual Blog posts, which are hosted in two level deep sub-directories &lt;code&gt;/blog/&amp;lt;year&amp;gt;&lt;/code&gt;. Though, the Blog post in sub-directories were not deployed and navigation to such pages resulted in 404 (page not found) error pages.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The documentation of Github Pages mentions, that the &lt;code&gt;Checks&lt;/code&gt; tab of the Pull Requests should be observed for detecting issues during the Github/Jekyll build. But I’ve never seen a single message there. May be this applies to &lt;em&gt;pure&lt;/em&gt; Jekyll builds only. In general, I find it hard to get an insight into what happens on Github Pages. To my knowledge, it’t not even possible to get an eye on the actually distributed files hosted by the web server - please drop me an email, if I missed something.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Anyway, to find by trial-and-error out what’s going on during the Github Pages build/deployment, I placed additional &lt;code&gt;index.html&lt;/code&gt; files into the directories &lt;code&gt;/blog&lt;/code&gt; as well as &lt;code&gt;/blog/2020&lt;/code&gt;. Surprisingly, the index page in &lt;code&gt;/blog&lt;/code&gt; could be retrieved by the Browser, but &lt;code&gt;/blog/2020&lt;/code&gt; is missing and leads a 404 (page not found) error page. Does the additional level of directories really makes the difference? That’d be far away from being logical. But after merging the directories &lt;code&gt;/blog/2020&lt;/code&gt; to &lt;code&gt;/blog_2020&lt;/code&gt; and moving the Blog posts into the new directory, the navigation to individual posts works fine, even on Github Pages&apos; deployment.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Actually, my enthusiasm for Github Pages diminished quite a bit. The process of build and deployment could be improved to more transparency in principle. In addition, I initially was not aware of the limitation that personal (and organizational) Github pages can only be served from &lt;code&gt;master&lt;/code&gt; branch’s root directory, but not like project pages from a &lt;code&gt;/docs&lt;/code&gt; folder - the reason for this limitation is not clear to me. (Because of this limitation, I separated sources and distribution files of my project to different branches &lt;code&gt;sources-master&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt;. The local development is then setup with a single Git repo managing two worktrees.)&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;However, I’m still excited about JBake, it’s easy to use and always works as expected. In the meantime, I also adapted several templates, which is understandable and also well documented. JBake, really good stuff.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>JBake Blog with Maven Plugin</title>
      <link>https://guntherrotsch.github.io/blog_2020/jbake-blog-with-maven.html</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/jbake-blog-with-maven.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_preparation&quot;&gt;Preparation&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;sect2&quot;&gt; 
   &lt;h3 id=&quot;_java&quot;&gt;Java&lt;/h3&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;As of the time of writing, with Java runtime 11 or higher JBake (or one of its dependencies) logged exceptions to the console. At the first glance JBake still seemed to work. But to be on the save side, I usually run JBake with Java in version 8 &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;admonitionblock tip&quot;&gt; 
    &lt;table&gt; 
     &lt;tbody&gt;
      &lt;tr&gt; 
       &lt;td class=&quot;icon&quot;&gt; &lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt; &lt;/td&gt; 
       &lt;td class=&quot;content&quot;&gt; I use the nice little tool &lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;jenv&lt;/a&gt;, that allows to switch between different Java JDK versions easily. If you work on many projects with different Java versions at the same time, you should give &lt;code&gt;jenv&lt;/code&gt; a try, &lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt;
    &lt;/table&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;sect2&quot;&gt; 
   &lt;h3 id=&quot;_github_pages&quot;&gt;Github Pages&lt;/h3&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;I decided to publish my Blog on Github pages, which are well suited for statically generated sites. In addition, it’s well integrated with git and by that supports well-known workflows.&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;In my case, I created a personal Github Pages site by defining a repository named &lt;code&gt;guntherrotsch.github.io&lt;/code&gt;. Project-specific Github Pages are also possible, but could create links/URLs in some cases, which are not so nice. Please see the &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages&quot;&gt;Github Pages documentation&lt;/a&gt; for more information on setting up an appropriate repository.&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The Github Pages paragraph of the repository settings should after configuration look like:&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;imageblock&quot;&gt; 
    &lt;div class=&quot;content&quot;&gt; 
     &lt;img src=&quot;https://guntherrotsch.github.io/assets/img/Github_Pages_Setting_Blog.png&quot; alt=&quot;Image: Github Pages Setting&quot;&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The content merged to &lt;code&gt;master&lt;/code&gt; branch will be automatically published (with a short delay of max a few minutes).&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_starting_blog_project&quot;&gt;Starting Blog Project&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;When setting up my Blog, the goal was to utilize JBake by Maven only. So, I wanted to avoid to install JBake explicitly and let Maven handle the download and integration of JBake artifacts.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The most explanations below apply for the JBake Maven Plugin in general, but some are specific for settings I did for my Blog project. Please see the Maven &lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/blob/master/pom.xml&quot;&gt;pom.xml&lt;/a&gt; of my Blog project. If you also want to start your Blog with Maven and the JBake plugin, you could even copy the POM and adapt it slightly - very few definitions are specific to my Blog project, eg. group and artifact id.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_jbake_maven_plugin&quot;&gt;JBake Maven Plugin&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The JBake Maven Plugin is hosted on &lt;a href=&quot;https://github.com/jbake-org/jbake-maven-plugin&quot;&gt;Github&lt;/a&gt;. There you can find some useful information to start its usage.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;It also helps a lot, that the plugin follows good practices of Maven plugin development and provides a &lt;code&gt;help&lt;/code&gt; goal:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;$ mvn jbake:help   # -Ddetail=true -Dgoal=[seed|generate|watch|inline]&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;code&gt;jbake:help&lt;/code&gt; goal gives general information about other goals of the plugin, it provides even more information than the Github page of JBake Maven plugin. The &lt;code&gt;jbake:help&lt;/code&gt; called without additional parameters just lists available goals. In addition, it considers the property System property parameters &lt;code&gt;detail&lt;/code&gt; and &lt;code&gt;goal&lt;/code&gt; (commented out above) to give more detailed information about each plugin’s goal.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;sect2&quot;&gt; 
   &lt;h3 id=&quot;_plugin_goals&quot;&gt;Plugin Goals&lt;/h3&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The most goals of the plugin consider configuration parameters. The most important ones are:&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;dlist&quot;&gt; 
    &lt;dl&gt; 
     &lt;dt class=&quot;hdlist1&quot;&gt;
      outputDirectory
     &lt;/dt&gt; 
     &lt;dd&gt; 
      &lt;p&gt;The directory the goals write the generated output.&lt;/p&gt; 
     &lt;/dd&gt; 
     &lt;dt class=&quot;hdlist1&quot;&gt;
      inputDirectory
     &lt;/dt&gt; 
     &lt;dd&gt; 
      &lt;p&gt;The directory the goals read input from. The input directory defaults for the most goals to &lt;code&gt;${project.basedir}/src/main/jbake)&lt;/code&gt;.&lt;/p&gt; 
     &lt;/dd&gt; 
    &lt;/dl&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The easiest way to setup the Blog project is to fetch samples templates and content and populate the Blog project folders. This can be achieved with the &lt;code&gt;jbake:seed&lt;/code&gt; goal.&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The &lt;code&gt;jbake:seed&lt;/code&gt; goal is an exception to the default &lt;code&gt;outputDirectory&lt;/code&gt; parameter, because it populates the input directory. If you don’t like to modify the &lt;code&gt;pom.xml&lt;/code&gt; temporarily for the first initialization step and work with a copy of my POM, you can overwrite the output directory on the command-line by defining a Java System property as follows:&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;listingblock&quot;&gt; 
    &lt;div class=&quot;content&quot;&gt; 
     &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;$ mvn jbake:seed -DoutputDirectory=./src/main/jbake&lt;/code&gt;&lt;/pre&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;Before we generate the sample static Blog site, you should have a look at the jbake configuration, which is hosted in &lt;code&gt;${project.basedir}/src/main/jbake/jbake.properties)&lt;/code&gt;:&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;listingblock&quot;&gt; 
    &lt;div class=&quot;content&quot;&gt; 
     &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;#site.host=https://guntherrotsch.github.io
site.host=http://localhost:8080
render.tags=false
render.sitemap=true&lt;/code&gt;&lt;/pre&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;For local testing of the site, I’ve changed the &lt;code&gt;site.host&lt;/code&gt; property temporarily to localhost. JBake uses this parameter to generate the links between the site’s pages, which is quite important.&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;admonitionblock warning&quot;&gt; 
    &lt;table&gt; 
     &lt;tbody&gt;
      &lt;tr&gt; 
       &lt;td class=&quot;icon&quot;&gt; &lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt; &lt;/td&gt; 
       &lt;td class=&quot;content&quot;&gt; Don’t forget to change the &lt;code&gt;site.host&lt;/code&gt; to you Github Pages URL before you commit and push the project files to Github. The commented out first line shows the definition for my Blog site’s URL. &lt;/td&gt; 
      &lt;/tr&gt; 
     &lt;/tbody&gt;
    &lt;/table&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The &lt;code&gt;jbake:generate&lt;/code&gt; goal applies the project’s templates to the content files and generates the static site:&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;listingblock&quot;&gt; 
    &lt;div class=&quot;content&quot;&gt; 
     &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;$ mvn jbake:generate&lt;/code&gt;&lt;/pre&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;My project POM already defines input and output configuration parameters properly. If you want to have a look at the generated site you can either serve it by a local Web server, e.g. by executing &lt;code&gt;python3 -m http.server&lt;/code&gt; in the site’s root folder, or use the &lt;code&gt;jbake:inline&lt;/code&gt; goal, that starts JBake’s internal Web server:&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;listingblock&quot;&gt; 
    &lt;div class=&quot;content&quot;&gt; 
     &lt;pre class=&quot;highlightjs highlight&quot;&gt;&lt;code&gt;$ mvn jbake:inline [ -Dport=8000 ]&lt;/code&gt;&lt;/pre&gt; 
    &lt;/div&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The JBake’s internal Web server listens by default on port &lt;code&gt;8080&lt;/code&gt;. If you have another application occupying port &lt;code&gt;8080&lt;/code&gt;, then the listening port of JBake can be changed with the &lt;code&gt;port&lt;/code&gt; parameter.&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;The &lt;code&gt;jbake:inline&lt;/code&gt; watches for changes of templates and content in the source folder and re-generates the static site if any modified file is detected. After refreshing the page in the browser you see the changes without explicitly generating the static site again, which is very nice for a workflow. So, it’s worth considering usage of JBake’s internal Web server, even if you are used to another local Web server.&lt;/p&gt; 
   &lt;/div&gt; 
   &lt;div class=&quot;paragraph&quot;&gt; 
    &lt;p&gt;You can now navigate with your favorite Browser to &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt; to have a look at the sample content. After replacing the samples with your own content and merging the changed files to &lt;code&gt;master&lt;/code&gt; branch of your Blog project, Github Pages takes automatically care of publishing your site. Congratulations, your Blog is up and running.&lt;/p&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect1&quot;&gt; 
 &lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt; 
 &lt;div class=&quot;sectionbody&quot;&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;I’m really happy to have selected JBake as static site generator when I started blogging. The Java tooling feels familiar for me and JBake’s features are absolutely satisfying - I appreciate the Asciidoc support in particular.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Also, the combination with the Maven plugin works really well. Till today I haven’t installed JBake CLI and let do Maven the job of managing the required JBake dependencies.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div id=&quot;footnotes&quot;&gt; 
 &lt;hr&gt; 
 &lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt; 
  &lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Amendment, 18th of February 2020: In the meantime I found out that at least the OrientDB used by Jbake to manage the posts during the build requires Java 8. 
 &lt;/div&gt; 
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
