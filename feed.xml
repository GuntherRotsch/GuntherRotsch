<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://guntherrotsch.github.io</link>
    <atom:link href="https://guntherrotsch.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Tue, 28 Jan 2020 23:04:06 +0100</pubDate>
    <lastBuildDate>Tue, 28 Jan 2020 23:04:06 +0100</lastBuildDate>

    <item>
      <title>JBake Blog with Maven Plugin</title>
      <link>https://guntherrotsch.github.io/blog_2020/jbake-blog-with-maven.html</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">blog_2020/jbake-blog-with-maven.html</guid>
      	<description>
	&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_preparation&quot;&gt;Preparation&lt;/h3&gt; 
 &lt;div class=&quot;sect3&quot;&gt; 
  &lt;h4 id=&quot;_java&quot;&gt;Java&lt;/h4&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;As of the time of writing, with Java runtime 11 or higher JBake (or one of its dependencies) logged exceptions to the console. At the first glance JBake still seemed to work. But to be on the save side, I usually run JBake with Java in version 8.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;admonitionblock tip&quot;&gt; 
   &lt;table&gt; 
    &lt;tbody&gt;
     &lt;tr&gt; 
      &lt;td class=&quot;icon&quot;&gt; 
       &lt;div class=&quot;title&quot;&gt;
        Tip
       &lt;/div&gt; &lt;/td&gt; 
      &lt;td class=&quot;content&quot;&gt; I use the nice little tool &lt;a href=&quot;https://github.com/jenv/jenv&quot;&gt;jenv&lt;/a&gt;, that allows to switch between different Java JDK versions easily. If you work on many projects with different Java versions at the same time, you should give &lt;code&gt;jenv&lt;/code&gt; a try, &lt;/td&gt; 
     &lt;/tr&gt; 
    &lt;/tbody&gt;
   &lt;/table&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;sect3&quot;&gt; 
  &lt;h4 id=&quot;_github_pages&quot;&gt;Github Pages&lt;/h4&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;I decided to publish my Blog on Github pages, which are well suited for statically generated sites. In addition, it’s well integrated with git and by that supports well-known workflows.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;In my case, I created a personal Github Pages site by defining a repository named &lt;code&gt;guntherrotsch.github.io&lt;/code&gt;. Project-specific Github Pages are also possible, but could create links/URLs in some cases, which are not so nice. Please see the &lt;a href=&quot;https://help.github.com/en/github/working-with-github-pages&quot;&gt;Github Pages documentation&lt;/a&gt; for more information on setting up an appropriate repository.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The Github Pages paragraph of the repository settings should after configuration look like:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;imageblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;img src=&quot;https://guntherrotsch.github.io/assets/img/Github_Pages_Setting_Blog.png&quot; alt=&quot;Github Pages Setting Blog&quot;&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The content merged to &lt;code&gt;master&lt;/code&gt; branch will be automatically published (with a short delay of max a few minutes).&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_starting_blog_project&quot;&gt;Starting Blog Project&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;When setting up my Blog, the goal was to utilize JBake by Maven only. So, I wanted to avoid to install JBake explicitly and let Maven handle the download and integration of JBake artifacts.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;The most explanations below apply for the JBake Maven Plugin in general, but some are specific for settings I did for my Blog project. Please see the Maven &lt;a href=&quot;https://github.com/GuntherRotsch/guntherrotsch.github.io/blob/master/pom.xml&quot;&gt;pom.xml&lt;/a&gt; of my Blog project. If you also want to start your Blog with Maven and the JBake plugin, you could even copy the POM and adapt it slightly - very few definitions are specific to my Blog project, eg. group and artifact id.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_jbake_maven_plugin&quot;&gt;JBake Maven Plugin&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;The JBake Maven Plugin is hosted on &lt;a href=&quot;https://github.com/jbake-org/jbake-maven-plugin&quot;&gt;Github&lt;/a&gt;. There you can find some useful information to start its usage.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;It also helps a lot, that the plugin follows good practices of Maven plugin development and provides a &lt;code&gt;help&lt;/code&gt; goal:&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;listingblock&quot;&gt; 
  &lt;div class=&quot;content&quot;&gt; 
   &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:help   # -Ddetail=true -Dgoal=[seed|generate|watch|inline]&lt;/code&gt;&lt;/pre&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;The &lt;code&gt;jbake:help&lt;/code&gt; goal gives general information about other goals of the plugin, it provides even more information than the Github page of JBake Maven plugin. The &lt;code&gt;jbake:help&lt;/code&gt; called without additional parameters just lists available goals. In addition, it considers the property System property parameters &lt;code&gt;detail&lt;/code&gt; and &lt;code&gt;goal&lt;/code&gt; (commented out above) to give more detailed information about each plugin’s goal.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;sect3&quot;&gt; 
  &lt;h4 id=&quot;_plugin_goals&quot;&gt;Plugin Goals&lt;/h4&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The most goals of the plugin consider configuration parameters. The most important ones are:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;dlist&quot;&gt; 
   &lt;dl&gt; 
    &lt;dt class=&quot;hdlist1&quot;&gt;
     outputDirectory
    &lt;/dt&gt; 
    &lt;dd&gt; 
     &lt;p&gt;The directory the goals write the generated output.&lt;/p&gt; 
    &lt;/dd&gt; 
    &lt;dt class=&quot;hdlist1&quot;&gt;
     inputDirectory
    &lt;/dt&gt; 
    &lt;dd&gt; 
     &lt;p&gt;The directory the goals read input from. The input directory defaults for the most goals to &lt;code&gt;${project.basedir}/src/main/jbake)&lt;/code&gt;.&lt;/p&gt; 
    &lt;/dd&gt; 
   &lt;/dl&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The easiest way to setup the Blog project is to fetch samples templates and content and populate the Blog project folders. This can be achieved with the &lt;code&gt;jbake:seed&lt;/code&gt; goal.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;code&gt;jbake:seed&lt;/code&gt; goal is an exception to the default &lt;code&gt;outputDirectory&lt;/code&gt; parameter, because it populates the input directory. If you don’t like to modify the &lt;code&gt;pom.xml&lt;/code&gt; temporarily for the first initialization step and work with a copy of my POM, you can overwrite the output directory on the command-line by defining a Java System property as follows:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:seed -DoutputDirectory=./src/main/jbake&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;Before we generate the sample static Blog site, you should have a look at the jbake configuration, which is hosted in &lt;code&gt;${project.basedir}/src/main/jbake/jbake.properties)&lt;/code&gt;:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;#site.host=https://guntherrotsch.github.io
site.host=http://localhost:8080
render.tags=false
render.sitemap=true&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;For local testing of the site, I’ve changed the &lt;code&gt;site.host&lt;/code&gt; property temporarily to localhost. JBake uses this parameter to generate the links between the site’s pages, which is quite important.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;admonitionblock warning&quot;&gt; 
   &lt;table&gt; 
    &lt;tbody&gt;
     &lt;tr&gt; 
      &lt;td class=&quot;icon&quot;&gt; 
       &lt;div class=&quot;title&quot;&gt;
        Warning
       &lt;/div&gt; &lt;/td&gt; 
      &lt;td class=&quot;content&quot;&gt; Don’t forget to change the &lt;code&gt;site.host&lt;/code&gt; to you Github Pages URL before you commit and push the project files to Github. The commented out first line shows the definition for my Blog site’s URL. &lt;/td&gt; 
     &lt;/tr&gt; 
    &lt;/tbody&gt;
   &lt;/table&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;code&gt;jbake:generate&lt;/code&gt; goal applies the project’s templates to the content files and generates the static site:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:generate&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;My project POM already defines input and output configuration parameters properly. If you want to have a look at the generated site you can either serve it by a local Web server, e.g. by executing &lt;code&gt;python3 -m http.server&lt;/code&gt; in the site’s root folder, or use the &lt;code&gt;jbake:inline&lt;/code&gt; goal, that starts JBake’s internal Web server:&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;listingblock&quot;&gt; 
   &lt;div class=&quot;content&quot;&gt; 
    &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code&gt;$ mvn jbake:inline [ -Dport=8000 ]&lt;/code&gt;&lt;/pre&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The JBake’s internal Web server listens by default on port &lt;code&gt;8080&lt;/code&gt;. If you have another application occupying port &lt;code&gt;8080&lt;/code&gt;, then the listening port of JBake can be changed with the &lt;code&gt;port&lt;/code&gt; parameter.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;The &lt;code&gt;jbake:inline&lt;/code&gt; watches for changes of templates and content in the source folder and re-generates the static site if any modified file is detected. After refreshing the page in the browser you see the changes without explicitly generating the static site again, which is very nice for a workflow. So, it’s worth considering usage of JBake’s internal Web server, even if you are used to another local Web server.&lt;/p&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;paragraph&quot;&gt; 
   &lt;p&gt;You can now navigate with your favorite Browser to &lt;code&gt;&lt;a href=&quot;http://localhost:8080&quot; class=&quot;bare&quot;&gt;http://localhost:8080&lt;/a&gt;&lt;/code&gt; to have a look at the sample content. After replacing the samples with your own content and merging the changed files to &lt;code&gt;master&lt;/code&gt; branch of your Blog project, Github Pages takes automatically care of publishing your site. Congratulations, your Blog is up and running.&lt;/p&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;sect2&quot;&gt; 
 &lt;h3 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h3&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;I’m really happy to have selected JBake as static site generator when I started blogging. The Java tooling feels familiar for me and JBake’s features are absolutely satisfying - I appreciate the Asciidoc support in particular.&lt;/p&gt; 
 &lt;/div&gt; 
 &lt;div class=&quot;paragraph&quot;&gt; 
  &lt;p&gt;Also, the combination with the Maven plugin works really well. Till today I haven’t installed JBake CLI and let do Maven the job of managing the required JBake dependencies.&lt;/p&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
